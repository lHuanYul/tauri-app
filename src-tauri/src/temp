Box<dyn Error>

pub fn scatter_chart_generate(
    chart_data_points: &mut ChartDataPoints,
    chart_name: &str
) -> Result<PathBuf, String> {
    let file_path = directory_mod::create_file(store_folder(), &format!("{}.png", chart_name))?;
    let _file_path = file_path.clone();

    let drawing_area = BitMapBackend::new(&_file_path, (960, 540))
        .into_drawing_area();
    drawing_area
        .fill(&WHITE)
        .map_err(|e| format!("Generate line chart failed: {}", e) )?;

    let max_index = chart_data_points.data_points.len() as u32;
    let mut chart = ChartBuilder::on(&drawing_area)
        .caption("Scatter Chart (u32)", ("sans-serif", 20))
        .margin(10)
        .x_label_area_size(30).y_label_area_size(30)
        .build_cartesian_2d(0u32..(max_index / 5), 0u32..10u32)
        .map_err(|e| format!("Generate line chart failed: {}", e) )?;

    chart.configure_mesh()
        .x_desc("X value").y_desc("Y value")
        .draw()
        .map_err(|e| format!("Generate line chart failed: {}", e) )?;

    let scatter_data: Vec<(u32, u32)> = chart_data_points
        .data_points
        .iter()
        .enumerate()
        .map(|(i, &v)| (i as u32 / 5, v))
        .collect();

    // 繪製散點：圓點半徑 5，紅色實心
    chart.draw_series(
            scatter_data
                .into_iter()
                .map(|(x, y)| Circle::new((x, y), 5, RED.filled()))
        )
        .map_err(|e| format!("Generate line chart failed: {}", e) )?;

    drawing_area.present()
        .map_err(|e| format!("Generate line chart failed: {}", e) )?;

    Ok(file_path)
}
